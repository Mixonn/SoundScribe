package com.soundscribe.converters.xml;

import com.soundscribe.converters.PyinNote;
import com.soundscribe.utilities.MidiNotes;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/** XmlPojo is class of objects that stores data about song generated by pYIN. */
@Getter
@Setter
@Slf4j
public class XmlPojo {

  private String songName;
  private Integer bpm;
  private Integer divisions;
  private List<PyinNote> notes;

  /**
   * Reads data from xml file and stores it into object for next processing.
   *
   * @param fileXML Xml file with notes.
   * @return XmlPojo object with parsed data.
   */
  public static XmlPojo readXMLData(File fileXML) {
    XmlPojo xmlPojo = new XmlPojo();
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    DocumentBuilder builder;
    try {
      builder = factory.newDocumentBuilder();
    } catch (ParserConfigurationException e) {
      log.error("Error while converting XML.", e);
      throw new RuntimeException(e);
    }
    Document document;
    try {
      document = builder.parse(fileXML);
    } catch (SAXException e) {
      log.error("Invalid xml file format", e);
      throw new RuntimeException(e);
    } catch (IOException e) {
      log.error("Could not find xml file.", e);
      throw new RuntimeException(e);
    }
    document.getDocumentElement().normalize();

    Element root = document.getDocumentElement();
    String songName = root.getNodeName();
    xmlPojo.setSongName(songName);

    Element soundElement = (Element) document.getElementsByTagName("bpm").item(0);
    xmlPojo.setBpm(Integer.parseInt(soundElement.getTextContent()));

    Element divisionsElement = (Element) document.getElementsByTagName("divisions").item(0);
    xmlPojo.setDivisions(Integer.parseInt(divisionsElement.getTextContent()));

    List<PyinNote> noteList = new ArrayList<>();
    NodeList nList = document.getElementsByTagName("note");
    for (int temp = 0; temp < nList.getLength(); temp++) {
      Node node = nList.item(temp);
      if (node.getNodeType() == Node.ELEMENT_NODE) {
        Element eElement = (Element) node;

        double timestamp =
            Double.parseDouble(eElement.getElementsByTagName("timestamp").item(0).getTextContent());
        double duration =
            Double.parseDouble(eElement.getElementsByTagName("duration").item(0).getTextContent());
        double value =
            Double.parseDouble(eElement.getElementsByTagName("value").item(0).getTextContent());
        int midiValue =
            Integer.parseInt(eElement.getElementsByTagName("midiValue").item(0).getTextContent());
        String letterNotde = eElement.getElementsByTagName("letterNote").item(0).getTextContent();
        noteList.add(new PyinNote(timestamp, duration, value, midiValue, letterNotde));
      }
    }
    xmlPojo.setNotes(noteList);
    return xmlPojo;
  }

  public static File saveXMLData(XmlPojo xmlPojo, String fileLocation) {
    File xmlFile = new File(fileLocation + xmlPojo.getSongName() + ".xml");
    try {
      DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
      Document document = documentBuilder.newDocument();

      Element root = document.createElement(xmlPojo.getSongName());
      document.appendChild(root);

      Element bpm = document.createElement("bpm");
      bpm.appendChild(document.createTextNode(String.valueOf(xmlPojo.getBpm())));
      root.appendChild(bpm);

      Element divisions = document.createElement("divisions");
      divisions.appendChild(document.createTextNode(String.valueOf(xmlPojo.getDivisions())));
      root.appendChild(divisions);

      for (PyinNote pyinNote : xmlPojo.getNotes()) {
        Element note = document.createElement("note");

        Element timestamp = document.createElement("timestamp");
        timestamp.appendChild(document.createTextNode(String.valueOf(pyinNote.getTimestamp())));
        note.appendChild(timestamp);

        Element duration = document.createElement("duration");
        duration.appendChild(
            document.createTextNode(String.valueOf((pyinNote.getDurationInSeconds()))));
        note.appendChild(duration);

        double value = midiToFrequency(pyinNote.getMidiValue());

        Element val = document.createElement("value");
        val.appendChild(document.createTextNode(String.valueOf(value)));
        note.appendChild(val);

        Element midi = document.createElement("midiValue");
        midi.appendChild(document.createTextNode(String.valueOf(pyinNote.getMidiValue())));
        note.appendChild(midi);

        Element letterNote = document.createElement("letterNote");
        letterNote.appendChild(
            document.createTextNode(MidiNotes.getNoteSymbolByMidiValue(pyinNote.getMidiValue())));
        note.appendChild(letterNote);

        root.appendChild(note);

        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource domSource = new DOMSource(document);
        StreamResult streamResult = new StreamResult(xmlFile);

        transformer.transform(domSource, streamResult);
      }
    } catch (ParserConfigurationException | TransformerException e) {
      log.error("Could not update file", e);
    }
    return xmlFile;
  }

  private static double midiToFrequency(double midiValue) {
    return Math.pow(2, (midiValue - 69) / 12) * 440;
  }
}
